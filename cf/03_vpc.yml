AWSTemplateFormatVersion: 2010-09-09
Description: VPC for examples

Parameters:
  VpcName:
    Description: Name of VPC
    Type: String
    Default: VPC for ECS example

  VpcCIDR:
    Description: CIDR for VPC
    Type: String
    Default: 172.16.0.0/16

  PublicSubnetCIDR:
    Description: CIDR for the public subnet
    Type: String
    Default: 172.16.1.0/24

  PrivateSubnetCIDR:
    Description: CIDR for the private subnet
    Type: String
    Default: 172.16.2.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} Public Subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} Private Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  IngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Allow 8080 and 80"
      GroupDescription: Allows access from the external world
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp

Outputs: 
  VPCID:
    Description: ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::Region}-vpc
  IngressSecurityGroupID:
    Description: ID of the ingress security group
    Value: !GetAtt IngressSecurityGroup.GroupId
    Export:
      Name: !Sub ${AWS::Region}-ingress-security-group
  PublicSubnetID:
    Description: ID of the public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${AWS::Region}-public-subnet